[{"content":"First-Time Git Setup Now that you have Git on your system, you’ll want to do a few things to customize your Git environment. You should have to do these things only once on any given computer; they’ll stick around between upgrades. You can also change them at any time by running through the commands again.\nGit comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places:\n[path]/etc/gitconfig file: Contains values applied to every user on the system and all their repositories. If you pass the option --system to git config, it reads and writes from this file specifically. Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it.\n~/.gitconfig or ~/.config/git/config file: Values specific personally to you, the user. You can make Git read and write to this file specifically by passing the --global option, and this affects all of the repositories you work with on your system.\nconfig file in the Git directory (that is, .git/config) of whatever repository you’re currently using: Specific to that single repository. You can force Git to read from and write to this file with the --local option, but that is in fact the default. Unsurprisingly, you need to be located somewhere in a Git repository for this option to work properly.\nEach level overrides values in the previous level, so values in .git/config trump those in [path]/etc/gitconfig.\nOn Windows systems, Git looks for the .gitconfig file in the $HOME directory (C:\\Users\\$USER for most people). It also still looks for [path]/etc/gitconfig, although it’s relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer. If you are using version 2.x or later of Git for Windows, there is also a system-level config file at C:\\Documents and Settings\\All Users\\Application Data\\Git\\config on Windows XP, and in C:\\ProgramData\\Git\\config on Windows Vista and newer. This config file can only be changed by git config -f \u0026lt;file\u0026gt; as an admin.\nYou can view all of your settings and where they are coming from using:\n$ git config --list --show-origin Your Identity The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:\n$ git config --global user.name \u0026quot;John Doe\u0026quot; $ git config --global user.email johndoe@example.com Again, you need to do this only once if you pass the --global option, because then Git will always use that information for anything you do on that system. If you want to override this with a different name or email address for specific projects, you can run the command without the --global option when you’re in that project.\nMany of the GUI tools will help you do this when you first run them.\nYour Editor Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message. If not configured, Git uses your system’s default editor.\nIf you want to use a different text editor, such as Emacs, you can do the following:\n$ git config --global core.editor emacs On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file. This can be different depending on how your editor is packaged.\nIn the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn’t support all plug-ins. If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you’ll type something like this:\n$ git config --global core.editor \u0026quot;'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\u0026quot; Note: Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system. If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in git config core.editor commands.\nWarning: You may find, if you don’t setup your editor like this, you get into a really confusing state when Git attempts to launch it. An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.\nYour default branch name By default Git will create a branch called master when you create a new repository with git init. From Git version 2.28 onwards, you can set a different name for the initial branch.\nTo set main as the default branch name do:\n$ git config --global init.defaultBranch main Checking Your Settings If you want to check your configuration settings, you can use the git config --list command to list all the settings Git can find at that point:\n$ git config --list user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ... You may see keys more than once, because Git reads the same key from different files ([path]/etc/gitconfig and ~/.gitconfig, for example). In this case, Git uses the last value for each unique key it sees.\nYou can also check what Git thinks a specific key’s value is by typing git config \u0026lt;key\u0026gt;:\n$ git config user.name John Doe ","permalink":"https://mdk84.github.io/english-posts/git-config/","summary":"First-Time Git Setup Now that you have Git on your system, you’ll want to do a few things to customize your Git environment. You should have to do these things only once on any given computer; they’ll stick around between upgrades. You can also change them at any time by running through the commands again.\nGit comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates.","title":"Git Configuration"},{"content":"Hello there. I\u0026rsquo;m MDK. I\u0026rsquo;m :\na student a programmer interested in Python and C# ","permalink":"https://mdk84.github.io/aboutme/","summary":"Hello there. I\u0026rsquo;m MDK. I\u0026rsquo;m :\na student a programmer interested in Python and C# ","title":"About me"},{"content":" حالا که گیت را در سیستم خود دارید، وقت آن است که چند شخصی سازی در محیط گیت تان انجام دهید .باید این کار ها را فقط یک بار به ازای هر کامپیوتری انجام دهید. این تنظیمات با بروزرسانی ها از بین نمی رود\nهمچنین می توانید هر زمان که خواستید آنها را با اجرای دوباره دستورات تغییر دهید\nGit Config گیت با ابزاری به نام\nارائه می شود، که به شما امکان تنظیم و خواندن متغیر های پیکربندی که تمام جوانب کاری گیت و ظاهر آن را مدیریت می کنند را می دهد. این متغیر ها را می توان در سه مکان مختلف ذخیره کرد:\n/etc/gitconfig فایل\nشامل مقادیری است که برای تمام کاربران سیستم و تمام مخازن آنها اعمال می شود\nاگر از آپشن \u0026ndash; استفاده کنید، خواندن و نوشتن با فایل مذکور انجام می شود.(به دلیل اینکه این یک فایل تنظیم سیستمی برای گیت کانفیگ است، ممکن است شما به دسترسی سطح ادمین یا سوپریوزر احتیاج داشته باشید تا بتوانید آن را ویرایش کنید) ~/.config/git/config یا~/.gitconfig فایل\n--globalمقادیر مختص به شما، کاربر را نگهداری می کند. شما می توانید با دادن آپشن\nبه گیت بگویید تا مخصوصا با این فایل خواندن و نوشتن را انجام بدهد (.git/configهمان)درون پوشه گیتconfigفایل\nتنظیمات مختص به آن مخزن پروژه ای که درحال کار روی آن هستید را نگهداری می کند\n--localشما می توانید با آپشن\nگیت را مجبور کنید تا خواندن و نوشتن را روی این فایل انجام دهد. در حقیقت، گیت به طور پیش فرض همین کار را می کند (بدیهی است که نیاز دارید درون پوشه آن مخزن گیت باشید تا این دستور به درستی کار کند) هر کدام از این مرتبه‌ها تنظیمات مرتبه قبل را بازنویسی می‌کنند. یعنی ابتدا فایل مرحله اول خوانده می شود. سپس مرحله دوم و سپس مرحله سوم\nشما می‌توانید تمام تنظیمات خود و اینکه از کجا می‌آیند را با دستور زیر بررسی کنید\ngit config --list --show-origin هویت شما اولین کاری که باید هنگام نصب گیت انجام دهید تنظیم نام کاربری و آدرس ایمیل خود است. این اصل مهمی است، چرا که هر گیت کامیت از این\nاطلاعات استفاده می کند و به صورت غیر قابل تغییر، درون کامیت هایی که شما می سازید حک می شود\nبرای مثال\ngit config --global user.name \u0026quot;John Doe\u0026quot; git config --global user.email johndoe@example.com فقط لازم است که یکبار این کار را انجام دهید. چون که گیت همیشه از این اطلاعات برای هر کاری در آن سیستم استفاده خواهد کرد\nویرایشگر شما اکنون که هویت شما تنظیم شده است، می‌توانید ویرایشگر پیش‌فرضی که هنگام تایپ پیام، گیت احتیاج دارد را تنظیم کنید. در صورتی که ویرایشگر کد پیش فرض تنظیم نشود، گیت از ویرایشگر کد پیش فرض سیستم استفاده می کند. اگر می‌خواهید که از ویرایشگر متفاوتی، مانند ایمکس، استفاده کنید می‌توانید مانند دستور زیر این کار را انجام دهید\ngit config --global core.editor emacs در ویندوز اگر می‌خواهید که از یک ویرایشگر متفاوت استفاده کنید باید مسیر کامل فایل اجرایی آنرا مشخص کنید\nنوت‌پد++ را نظر بگیرید، یک ویرایشگر محبوب برنامه‌نویسی، که از آنجایی که نسخه ۶۴ بیتی در زمان نوشتن این متن از تمام افزونه‌ها پشتیبانی نمی‌کند احتمالاً از نسخه ۳۲ بیت آن استفاده می‌کنید. اگر شما از یک سیستم ویندوز ۳۲ بیتی استفاده می‌کنید یا یک ویرایشگر ۶۴ بیتی روی یک سیستم ۶۴ بیتی دارید، ورودی مسیر کامل چیزی شبیه زیر خواهد بود\ngit config --global core.editor \u0026quot;'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\u0026quot; برای کسب اطلاعات بیشتر در مورد اینکه چگونه ویرایشگر کد محبوب تان را در گیت به عنوان پیش فرض تنظیم کنید، روی این کلیک کنید\nبررسی تنظیمات شما git config --listاگر می خواهید که تنظیمات گیت را ببینید، می توانید از دستور\nبرای لیست کردن تمام تنظیماتی که گیت در مکان اجرا پیدا می کند استفاده کنید\n$ git config --list user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ... با تشکر از شما\nمنبع: مستندات گیت\n","permalink":"https://mdk84.github.io/farsi-posts/git-config/","summary":"حالا که گیت را در سیستم خود دارید، وقت آن است که چند شخصی سازی در محیط گیت تان انجام دهید .باید این کار ها را فقط یک بار به ازای هر کامپیوتری انجام دهید. این تنظیمات با بروزرسانی ها از بین نمی رود\nهمچنین می توانید هر زمان که خواستید آنها را با اجرای دوباره دستورات تغییر دهید\nGit Config گیت با ابزاری به نام\nارائه می شود، که به شما امکان تنظیم و خواندن متغیر های پیکربندی که تمام جوانب کاری گیت و ظاهر آن را مدیریت می کنند را می دهد.","title":"Git Configuration"}]